@* @page "/UserManagement/AddUser" *@
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<IdentityUser> UserManager
@inject RoleManager<ApplicationRoles> RoleManager
@inject NavigationManager NavigationManager

<div class="flex flex-col justify-center items-center m-0 py-12">
    <div class="bg-white p-12 rounded-lg shadow-md w-full max-w-2xl font-alpino border-gray-400 border">
        <EditForm Model="@newUser" OnValidSubmit="@HandleValidSubmit" class="space-y-6">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500" />

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="flex flex-col">
                    <label for="username" class="mb-1">Employee Name:</label>
                    <InputText id="username" @bind-Value="newUser.UserName" class="border p-2 rounded" />
                </div>
                <div class="flex flex-col">
                    <label for="email" class="mb-1">Email:</label>
                    <InputText id="email" @bind-Value="newUser.Email" class="border p-2 rounded" />
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="flex flex-col space-y-4">
                    <div class="flex flex-col">
                        <label for="password" class="mb-1">Password:</label>
                        <InputText id="password" type="password" @bind-Value="password" class="border p-2 rounded" />
                    </div>
                    @if (errors.Any())
                    {
                        <ul class="p-0 m-0 pt-2">
                            @foreach (var error in errors)
                            {
                                <li>
                                    <span class="text-sm text-red-500">@error</span>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <span class="text-sm text-gray-500">Password must be at least 6 characters long, contain at least one special character and one number.</span>
                    }
                </div>
                <div class="flex flex-col relative">
                    <label for="role" class="mb-1">Role:</label>
                    <div class="flex items-center">
                        <InputSelect id="role" @bind-Value="role" class="border p-2 rounded flex-grow">
                            @foreach (var role in roles)
                            {
                                <option value="@role">@role</option>
                            }
                        </InputSelect>
                        <button type="button" class="ml-2 text-green-500" @onclick="OpenAddRoleModal">
                            <i class="fas fa-plus-circle"></i>
                        </button>
                        <div class="absolute top-0 right-0 mt-8 ml-2 p-2 bg-gray-200 text-gray-700 rounded shadow-lg text-sm hidden group-hover:block">
                            Click to add a new role
                        </div>
                    </div>
                </div>
            </div>

            <div class="flex justify-center items-center mt-12">
                <button type="submit" class="font-medium font-excon py-2 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm">Add User</button>
            </div>
        </EditForm>
    </div>
</div>

<AddRoleModal @ref="addRoleModal" OnRoleAdded="LoadRoles" />

@code {
    private IdentityUser newUser = new IdentityUser();
    private string password;
    private string role;
    private List<string> errors = new List<string>();
    private List<string> roles = new List<string>();
    private AddRoleModal addRoleModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        roles = (await RoleManager.Roles.Select(r => r.Name).ToListAsync()).Distinct().ToList();
    }

    private async Task HandleValidSubmit()
    {
        errors.Clear();

        var validator = new CustomPasswordValidator<IdentityUser>();
        var validationResult = await validator.ValidateAsync(UserManager, newUser, password);

        if (!validationResult.Succeeded)
        {
            errors.AddRange(validationResult.Errors.Select(e => e.Description));
            return;
        }

        var result = await UserManager.CreateAsync(newUser, password);

        if (result.Succeeded)
        {
            var roleResult = await UserManager.AddToRoleAsync(newUser, role);

            if (roleResult.Succeeded)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                foreach (var error in roleResult.Errors)
                {
                    errors.Add(error.Description);
                }
            }
        }
        else
        {
            foreach (var error in result.Errors)
            {
                errors.Add(error.Description);
            }
        }
    }

    private void OpenAddRoleModal()
    {
        addRoleModal.Show();
    }
}
