@* @page "/MedicalInventory" *@
@attribute [Authorize]

@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Notifications
@using System.Net
@using Microsoft.AspNetCore.Identity
@using System.IO
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Formats.Webp;
@using SixLabors.ImageSharp.Processing;
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject IInventoryServices InventoryService
@inject IUserLogsService UserLogsService
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleManager<ApplicationRoles> RoleManager
@inject IJSRuntime JS

<PageTitle>Medical Inventory</PageTitle>

<div>
    <h3 class="text-center text-4xl font-excon">Medical Inventory</h3>

    <div class="flex flex-col justify-center m-0 py-12">
        <SfGrid @ref="SfInventoryGrid" ID="SfInventoryGrid" DataSource="inventoryData" AllowTextWrap="false" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" EnableStickyHeader ="true" AllowFreezeLineMoving="true" AllowSorting="true" AllowFiltering="true" GridLines="GridLine.Both" AllowResizing="true"  AllowMultiSorting="true" Toolbar="@toolbar">
            <GridEditSettings Mode="EditMode.Normal" AllowAdding="true" ShowDeleteConfirmDialog="true" AllowEditing="true" AllowDeleting="true">
                <HeaderTemplate>
                    <span>@(GetDialogHeaderText(context as InventoryModel))</span>
                </HeaderTemplate>

                <FooterTemplate>
                    <SfButton OnClick="@Save" IsPrimary="true">Save</SfButton>
                    <SfButton OnClick="@Cancel">Cancel</SfButton>
                </FooterTemplate>
            </GridEditSettings>

            <GridSortSettings>
                <GridSortColumns>
                    <GridSortColumn Field="@nameof(InventoryModel.Id)" Direction="SortDirection.Descending"></GridSortColumn>
                </GridSortColumns>
            </GridSortSettings>

            <GridEvents OnToolbarClick="TooBarBtnClickHandler" OnActionBegin="ActionBeginHandler" TValue="InventoryModel" QueryCellInfo="CustomizeCell" RowDataBound="CustomizeRow" RowSelected="OnRowSelected"></GridEvents>

            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>

            <GridPageSettings PageSize="10"></GridPageSettings>

            <GridColumns>
                <GridColumn AllowAdding="false" IsPrimaryKey="true" Field="@nameof(InventoryModel.Id)" Width="50px" AllowFiltering="false" Freeze="FreezeDirection.Left">
                </GridColumn>

                <GridColumn Field="@nameof(InventoryModel.Images)" HeaderText="IMAGE" Width="230px" AllowFiltering="false">
                    <Template>
                        @{
                            var InventoryModel = context as InventoryModel;
                            var imageUrls = InventoryModel?.Images?.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries) ?? new string[0];
                        }
                        <div class="flex space-x-4">
                            @if (imageUrls.Length == 0)
                            {
                                <span class="font-alpino text-base font-light">No Images Have been Uploaded.</span>
                            }
                            else
                            {
                                @foreach (var imageUrl in imageUrls)
                                {
                                    <div class="image">
                                        <img class="w-12 h-12" src="@imageUrl" alt=""/>
                                    </div>
                                }
                                <button @onclick="() => OpenCarousel(imageUrls)" class=""><i class="fa-solid fa-expand text-indigo-600 text-md hover:scale-110 ease-in transition-all duration-300"></i></button>
                            }
                        </div>
                    </Template>

                    <EditTemplate>
                        <div class="flex flex-col py-4 space-y-4">
                            @{
                                var InventoryModel = context as InventoryModel;
                                var imageUrls = InventoryModel?.Images?.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries) ?? new string[0];
                            }
                            <div class="flex justify-center items-center space-x-4">
                                @if (imageUrls.Length > 0)
                                {
                                    @foreach (var imageUrl in imageUrls)
                                    {
                                        <div class="flex flex-col justify-center items-center space-y-2">
                                            <img class="w-12 h-12 @(selectedImageUrl == imageUrl ? "border border-red-500" : "")" alt="product-image" src="@imageUrl" @onclick="() => ToggleImageSelection(imageUrl)" />
                                            <button type="button" @onclick="@(async () => await RemoveImage(imageUrl, InventoryModel))">
                                                <i class="fa-solid fa-xmark text-blue-500 text-lg hover:scale-105 ease-in transition-all duration-300"></i>
                                            </button>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p>No images uploaded</p>
                                }
                            </div>
                            @if (imageUrls.Length >= 3)
                            {
                                <p class="text-xs flex flex-wrap text-red-500">You can only upload up to 3 images. <br> Please delete existing images before <br> adding new ones.</p>
                            }
                            else
                            {
                                <SfUploader ID="uploadFiles" AllowedExtensions=".jpg,.png,.jpeg" Multiple="false" MaxFileSize="10485760" @ref="Uploader">
                                    <UploaderEvents ValueChange="@(args => ImageUpload(args, InventoryModel))"></UploaderEvents>
                                </SfUploader>
                                <p class="text-xs folt-alpino font-light text-gray-500">Maximum file size allowed is 10 MB.</p>
                            }
                        </div>
                    </EditTemplate>
                </GridColumn>

            <GridColumn HeaderText="Manufacturer & Description" Field="@nameof(InventoryModel.NameFirstPart)" Width="250px">
                    <EditTemplate Context="context">
                        @if (context is InventoryModel inventory)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="inventory.NameFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="inventory.SelectedNamecolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="Location" Field="@nameof(InventoryModel.LocationFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is InventoryModel inventory)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="inventory.LocationFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="inventory.SelectedLocationcolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="Quantity" Field="@nameof(InventoryModel.QtyFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is InventoryModel inventory)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="inventory.QtyFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="inventory.SelectedQtycolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="PN, SN, MODEL, ITEM #" Field="@nameof(InventoryModel.PinFirstPart)" Width="220px">
                    <EditTemplate Context="context">
                        @if (context is InventoryModel inventory)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="inventory.PinFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="inventory.SelectedPincolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="MRITS" Field="@nameof(InventoryModel.MRITSFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is InventoryModel inventory)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="inventory.MRITSFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="inventory.SelectedMRITScolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="TAG" Field="@nameof(InventoryModel.TagFirstPart)" Width="150px">
                    <EditTemplate Context="context">
                        @if (context is InventoryModel inventory)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="inventory.TagFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Tag color" DataSource="@color" @bind-Value="inventory.SelectedTagcolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Tag scope" DataSource="@scope" @bind-Value="inventory.SelectedTagScope">
                                    <DropDownListFieldSettings Value="scope" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="BARCODE" Field="@nameof(InventoryModel.BarCodeFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is InventoryModel inventory)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="inventory.BarCodeFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="inventory.SelectedBarCodecolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="STATUS / NOTES" Field="@nameof(InventoryModel.StatusFirstPart)" Width="150px" Freeze="FreezeDirection.Right">
                    <Template>
                        @{
                            var statusNotes = (context as InventoryModel);
                            if (statusNotes != null)
                            {
                                Count++;
                                <SfTooltip @key="@Count" Position="Position.BottomLeft">
                                    <ContentTemplate>
                                        @statusNotes.StatusFirstPart
                                    </ContentTemplate>
                                    <ChildContent>
                                        <span class="font-alpino font-light text-base">@statusNotes.StatusFirstPart</span>
                                    </ChildContent>
                                </SfTooltip>
                            }
                        }
                    </Template>
                    <EditTemplate Context="context">
                        @if (context is InventoryModel inventory)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="inventory.StatusFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="inventory.SelectedStatuscolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

    <SfToast ID="InventoryToast" @ref="ToastObj" Timeout="2000">
        <ToastPosition X="Right" Y="Bottom"></ToastPosition>
        <ToastAnimation Show="SlideBottomIn" Hide="SlideRightOut"></ToastAnimation>
    </SfToast>
</div>

@code {
    int Count { get; set; } = 0;
    private string DialogButtonCaption { get; set; }
    private SfUploader Uploader;
    private string[] carouselImages = Array.Empty<string>();
    private SfGrid<InventoryModel> SfInventoryGrid { get; set; }
    private bool VisibleProp { get; set; } = false;
    private List<InventoryModel> inventoryData = new();
    public InventoryModel inventoryModel = new();
    private List<string> toolbar = new List<string>();
    private List<string> color = new List<string> { "Yellow", "Green", "Red", "Orange", "Blue", "Cyan", "Magenta", "None" };
    private List<string> scope = new List<string> { "Row", "Cell" };
    private int deleteId;
    private ApplicationRoles permissions = new ApplicationRoles();
    private bool hasDeletingAccessPermission;
    private bool hasEditingAccessPermission;
    private bool hasViewingAccessPermission;
    private bool hasFullAccessPermission;
    private bool hasAddingAccessPermission;
    private string selectedImageUrl;
    private List<string> tempImagePaths = new List<string>();
    private bool isImageUploading = false;
    private SfToast ToastObj;
    private List<ToastModel> ToastModels { get; set; } = new List<ToastModel>();
    private InventoryModel selectedMedicalInventoryModel;

    private void OnRowSelected(RowSelectEventArgs<InventoryModel> args)
    {
        selectedMedicalInventoryModel = args.Data;
        //Console.WriteLine($"Selected Model: {selectedMedicalInventoryModel}");
    }

    private async Task DuplicateRecord(InventoryModel selectedInventory)
    {
        if (selectedInventory == null)
        {
            return;
        }

        string userId = await GetCurrentUserIdAsync();
        string userName = await GetCurrentUserNameAsync();

        var result = await InventoryService.DuplicateInventoryAsync(selectedInventory.Id);
        if (result == (int)HttpStatusCode.OK)
        {
            await ShowToast($"Record Duplicated Successfully.", "success");
            inventoryData = await InventoryService.GetInventoryAsync();

            string crudOperationMessage = $"Record Duplicated in Medical Inventory";
            await UserLogsService.LogActivityAsync(new UserLogsModel
            {
                UserId = userId,
                UserName = userName,
                CrudOperation = crudOperationMessage,
            });

            await SfInventoryGrid.Refresh();
            //Console.WriteLine("Grid Refreshed");
        }
        else
        {
            await ShowToast($"Failed to Duplicate Record.", "error");
        }
    }

    private async Task<string> GetCurrentUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    }

    private async Task<string> GetCurrentUserNameAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity.Name;
    }

    private void ToggleImageSelection(string imageUrl)
    {
        if (selectedImageUrl == imageUrl)
        {
            selectedImageUrl = null;
        }
        else
        {
            selectedImageUrl = imageUrl;
        }
    }

protected override async Task OnInitializedAsync()
{
    inventoryData = (await InventoryService.GetInventoryAsync()).ToList();
    foreach (var item in inventoryData)
    {
        item.ParseTag();
        item.ParseProperties(); // Parse other properties as well
    }
    await LoadPermissions();
    SetupToolbar(); // Initial setup of the toolbar

    VisibleProp = true;

    Console.WriteLine("Inventory data loaded: " + inventoryData.Count + " items.");
}

    private void SetupToolbar()
    {
        toolbar.Clear();
        if (hasAddingAccessPermission || hasFullAccessPermission)
        {
            toolbar.Add("Add");
            toolbar.Add("Duplicate"); // Add the Duplicate button to the toolbar
        }
        if (hasEditingAccessPermission || hasFullAccessPermission)
        {
            toolbar.Add("Edit");
            if (!isImageUploading)
            {
                toolbar.Add("Update");
            }
        }
        if (hasDeletingAccessPermission || hasFullAccessPermission)
        {
            toolbar.Add("Delete");
        }
        if (hasAddingAccessPermission || hasEditingAccessPermission || hasFullAccessPermission)
        {
            toolbar.Add("Cancel");
        }
        toolbar.Add("Search");
        toolbar.Add("ExcelExport");
        toolbar.Add("PdfExport");
    }

public void CustomizeCell(QueryCellInfoEventArgs<InventoryModel> args)
{
    if (args?.Data == null || args.Column == null)
    {
        return;
    }

    void ApplyCellStyle(string selectedcolor)
    {
        if (string.IsNullOrEmpty(selectedcolor) || selectedcolor == "none")
        {
            return;
        }

        //Console.WriteLine($"Applying color {selectedcolor} to cell");

        switch (selectedcolor)
        {
            case "Yellow":
                args.Cell.AddClass(new string[] { "color-yellow" });
                break;
            case "Green":
                args.Cell.AddClass(new string[] { "color-green" });
                break;
            case "Red":
                args.Cell.AddClass(new string[] { "color-red" });
                break;
            case "Orange":
                args.Cell.AddClass(new string[] { "color-orange" });
                break;
            case "Blue":
                args.Cell.AddClass(new string[] { "color-blue" });
                break;
            case "Cyan":
                args.Cell.AddClass(new string[] { "color-cyan" });
                break;
            case "Magenta":
                args.Cell.AddClass(new string[] { "color-magenta" });
                break;
        }

        // Debugging: Print a message indicating the color was applied
        //Console.WriteLine($"Color {selectedcolor} applied to cell.");
    }

    // Apply the same logic for other entities
    if (args.Column.Field == nameof(InventoryModel.TagFirstPart))
    {
        ApplyCellStyle(args.Data.SelectedTagcolor);
    }
    else if (args.Column.Field == nameof(InventoryModel.NameFirstPart))
    {
        ApplyCellStyle(args.Data.SelectedNamecolor);
    }
    else if (args.Column.Field == nameof(InventoryModel.QtyFirstPart))
    {
        ApplyCellStyle(args.Data.SelectedQtycolor);
    }
    else if (args.Column.Field == nameof(InventoryModel.PinFirstPart))
    {
        ApplyCellStyle(args.Data.SelectedPincolor);
    }
    else if (args.Column.Field == nameof(InventoryModel.LocationFirstPart))
    {
        ApplyCellStyle(args.Data.SelectedLocationcolor);
    }
    else if (args.Column.Field == nameof(InventoryModel.BarCodeFirstPart))
    {
        ApplyCellStyle(args.Data.SelectedBarCodecolor);
    }
    else if (args.Column.Field == nameof(InventoryModel.StatusFirstPart))
    {
        ApplyCellStyle(args.Data.SelectedStatuscolor);
    }
    else if (args.Column.Field == nameof(InventoryModel.MRITSFirstPart))
    {
        ApplyCellStyle(args.Data.SelectedMRITScolor);
    }
}

    public void CustomizeRow(RowDataBoundEventArgs<InventoryModel> args)
    {
        if (args?.Data == null)
        {
            return;
        }

        if (string.IsNullOrEmpty(args.Data.SelectedTagScope) || args.Data.SelectedTagScope == "none")
        {
            return;
        }

        if (args.Data.SelectedTagScope == "Row")
        {
            if (string.IsNullOrEmpty(args.Data.SelectedTagcolor) || args.Data.SelectedTagcolor == "none")
            {
                return;
            }

            switch (args.Data.SelectedTagcolor)
            {
                case "Yellow":
                    args.Row.AddClass(new string[] { "color-yellow" });
                    break;
                case "Green":
                    args.Row.AddClass(new string[] { "color-green" });
                    break;
                case "Red":
                    args.Row.AddClass(new string[] { "color-red" });
                    break;
                case "Orange":
                    args.Row.AddClass(new string[] { "color-orange" });
                    break;
                case "Blue":
                    args.Row.AddClass(new string[] { "color-blue" });
                    break;
                case "Cyan":
                    args.Row.AddClass(new string[] { "color-cyan" });
                    break;
                case "Magenta":
                    args.Row.AddClass(new string[] { "color-magenta" });
                    break;
            }
        }
    }

    private async Task LoadPermissions()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var identityUser = await UserManager.GetUserAsync(user);
            var roles = await UserManager.GetRolesAsync(identityUser);
            var permissions = await GetPermissionsFromRoles(roles);

            //Console.WriteLine($"User: {identityUser.UserName}, Permissions: {string.Join(", ", permissions)}");

            hasFullAccessPermission = permissions.Contains("Full Access");
            hasEditingAccessPermission = permissions.Contains("Inventory Edit");
            hasAddingAccessPermission = permissions.Contains("Inventory Add");
            hasDeletingAccessPermission = permissions.Contains("Inventory Delete");
            hasViewingAccessPermission = permissions.Contains("Inventory View");

            StateHasChanged();
        }
    }

    private async Task<List<string>> GetPermissionsFromRoles(IList<string> roles)
    {
        var permissions = new List<string>();
        foreach (var role in roles)
        {
            var applicationRole = await RoleManager.FindByNameAsync(role);
            if (applicationRole != null)
            {
                permissions.AddRange(applicationRole.Permissions);
            }
        }
        return permissions.Distinct().ToList();
    }

    private async Task ShowToast(string message, string type)
    {
        var toastModel = new ToastModel
        {
            Content = message,
            Icon = "e-layers",
        };
        ToastModels.Add(toastModel);
        await ToastObj.ShowAsync(toastModel);
    }

public async Task ActionBeginHandler(ActionEventArgs<InventoryModel> args)
{
    try
    {
        string action = string.Empty;
        string userId = await GetCurrentUserIdAsync();
        string userName = await GetCurrentUserNameAsync();

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add" || args.Action == "Edit")
            {
                if (tempImagePaths.Count > 0)
                {
                    List<string> finalImagePaths = new List<string>();

                    if (!string.IsNullOrEmpty(args.Data.Images))
                    {
                        finalImagePaths.AddRange(args.Data.Images.Split(','));
                    }

                    foreach (var tempPath in tempImagePaths)
                    {
                        var finalDirectoryPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "product-images-medical");
                        var finalFilePath = Path.Combine(finalDirectoryPath, Path.GetFileName(tempPath));

                        if (!Directory.Exists(finalDirectoryPath))
                        {
                            Directory.CreateDirectory(finalDirectoryPath);
                        }

                        File.Move(tempPath, finalFilePath);
                        finalImagePaths.Add($"/product-images-medical/{Path.GetFileName(finalFilePath)}");
                    }

                    args.Data.Images = string.Join(",", finalImagePaths);
                    tempImagePaths.Clear();
                }

                // Update all properties before saving
                args.Data.UpdateAllProperties();

                await InventoryService.AddOrUpdateInventoryAsync(args.Data);
                inventoryData = (await InventoryService.GetInventoryAsync()).ToList();

                if (args.Action == "Add")
                {
                    NavigationManager.NavigateTo("/MedicalInventory", true);
                }

                await ShowToast($"Record {args.Action}ed Successfully", "success");
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            deleteId = args.RowData.Id;
            await InventoryService.DeleteInventoryAsync(deleteId);

            if (!string.IsNullOrEmpty(args.RowData.Images))
            {
                foreach (var imageUrl in args.RowData.Images.Split(','))
                {
                    string physicalPath = Path.Combine("wwwroot", imageUrl.TrimStart('/'));
                    if (File.Exists(physicalPath))
                    {
                        File.Delete(physicalPath);
                    }
                }
            }
            await ShowToast("Record Deleted Successfully", "success");
        }

        if (args.Action != null)
        {
            if(args.Action == "Add")
            {
                action = "Added";
            }
            else if(args.Action == "Edit")
            {
                action = "Edited";
            }
            else if(args.Action == "Delete")
            {
                action = "Deleted";
            }
            string crudOperationMessage = $"Record {action} in Medical Inventory";
            await UserLogsService.LogActivityAsync(new UserLogsModel
            {
                UserId = userId,
                UserName = userName,
                CrudOperation = crudOperationMessage,
            });
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"An error occurred in ActionBeginHandler: {ex.Message}");
        Console.WriteLine($"Stack Trace: {ex.StackTrace}");
        await ShowToast("Operation failed", "error");
    }
}

    private async Task Save(MouseEventArgs args)
    {
        await SfInventoryGrid.EndEditAsync();
        inventoryModel = await InventoryService.GetInventoryByIdAsync(inventoryModel.Id);
    }

    private async Task Cancel(MouseEventArgs args)
    {
        await SfInventoryGrid.CloseEditAsync();
        inventoryModel = await InventoryService.GetInventoryByIdAsync(inventoryModel.Id);
    }

public async Task TooBarBtnClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
{
    if (args.Item.Id.Contains("SfInventoryGrid_excelexport"))
    {
        ExcelExportProperties exportProperties = new ExcelExportProperties
        {
            FileName = $"MedicalInventory_{DateTime.Now:yyyyMMdd_HHmm}.xlsx" // Custom filename with timestamp
        };
        await SfInventoryGrid.ExportToExcelAsync(exportProperties);
    }
    else if (args.Item.Id.Contains("SfInventoryGrid_pdfexport"))
    {
        PdfExportProperties exportProperties = new PdfExportProperties
        {
            PageOrientation = Syncfusion.Blazor.Grids.PageOrientation.Landscape,
            FileName = $"MedicalInventory_{DateTime.Now:yyyyMMdd_HHmm}.pdf" // Custom filename with timestamp
        };
        await SfInventoryGrid.ExportToPdfAsync(exportProperties);
    }
    else if (args.Item.Id.Contains("_Update"))
    {
        await SfInventoryGrid.EndEditAsync();
    }
    else if (args.Item.Text == "Duplicate")
    {
        var selectedInventory = (await SfInventoryGrid.GetSelectedRecords()).FirstOrDefault();
        if (selectedInventory != null)
        {
            await DuplicateRecord(selectedInventory);
        }
    }
}

    private void Change()
    {
        if (isImageUploading)
        {
            this.SfInventoryGrid.EnableToolbarItemsAsync(new List<string>() { "Update" }, false);
        }
        else
        {
            this.SfInventoryGrid.EnableToolbarItemsAsync(new List<string>() { "Update" }, true);
        }
    }

    private async Task ImageUpload(UploadChangeEventArgs args, InventoryModel inventoryModel)
    {
        try
        {
            isImageUploading = true;
            Change();
            await ShowToast($"Please wait for the image to complete uploading before saving.", "warning");
            StateHasChanged();

            const long maxAllowedSize = 10485760;

            if (args?.Files == null || !args.Files.Any())
            {
                throw new InvalidOperationException("No files provided for upload.");
            }

            HashSet<int> existingIndices = new HashSet<int>();
            if (!string.IsNullOrEmpty(inventoryModel.Images))
            {
                var imagePaths = inventoryModel.Images.Split(',');
                foreach (var path in imagePaths)
                {
                    var fileName = Path.GetFileNameWithoutExtension(path);
                    var parts = fileName.Split('-');
                    if (parts.Length > 1 && int.TryParse(parts.Last(), out int index))
                    {
                        existingIndices.Add(index);
                    }
                }
            }

            int nextIndex = 1;
            while (existingIndices.Contains(nextIndex))
            {
                nextIndex++;
            }

            foreach (var file in args.Files.Take(3))
            {
                using var ms = new MemoryStream();
                await file.File.OpenReadStream(maxAllowedSize).CopyToAsync(ms);
                ms.Seek(0, SeekOrigin.Begin);

                using var image = Image.Load(ms);
                var tempDirectoryPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "product-images-medical", "temp-images");
                var timestamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                var tempFilePath = Path.Combine(tempDirectoryPath, $"{Path.GetFileNameWithoutExtension(file.File.Name)}-{timestamp}-{nextIndex}.webp");

                if (!Directory.Exists(tempDirectoryPath))
                {
                    Directory.CreateDirectory(tempDirectoryPath);
                }

                using (var fs = new FileStream(tempFilePath, FileMode.Create))
                {
                    image.Save(fs, new WebpEncoder());
                }

                tempImagePaths.Add(tempFilePath);
                nextIndex++;
                while (existingIndices.Contains(nextIndex))
                {
                    nextIndex++;
                }
            }

            StateHasChanged();
            await ShowToast($"Image Uploaded Successfully", "success");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while uploading images: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
        }
        finally
        {
            isImageUploading = false;
            Change();
            StateHasChanged();
        }
    }

    private async Task RemoveImage(string imageUrl, InventoryModel inventoryModel)
    {
        if (inventoryModel == null)
        {
            Console.WriteLine("Inventory model is null.");
            return;
        }

        try
        {
            List<string> imageUrls = inventoryModel.Images?.Split(',').Select(url => url.Trim()).ToList() ?? new List<string>();

            if (imageUrls.Contains(imageUrl))
            {
                imageUrls.Remove(imageUrl);
                inventoryModel.Images = string.Join(",", imageUrls);

                string physicalPath = Path.Combine("wwwroot", imageUrl.TrimStart('/'));
                if (File.Exists(physicalPath))
                {
                    File.Delete(physicalPath);
                    //Console.WriteLine($"Image file {physicalPath} deleted successfully.");
                }
                else
                {
                    //Console.WriteLine($"Image file {physicalPath} not found.");
                }

                StateHasChanged();
                await ShowToast($"Image Deleted Successfully", "success");
            }
            else
            {
                //Console.WriteLine("Image not found in the list.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while removing the image: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
        }
    }

    private string GetDialogHeaderText(InventoryModel inventoryModel)
    {
        return inventoryModel?.Id == 0 ? "Add New Inventory" : $"Edit {inventoryModel.Name}";
    }

    private void OpenCarousel(string[] images)
    {
        carouselImages = images;
        JS.InvokeVoidAsync("openModal");
    }
}

<style>
/* Define color classes */
.color-yellow {
    background-color: #F6FB7A;
}

.color-green {
    background-color: #B4E380;
}

.color-red {
    background-color: #FF6969;
}

.color-orange {
    background-color: #FFD580;
}

.color-blue {
    background-color: #ADD8E6;
}

.color-cyan {
    background-color: #E0FFFF;
}

.color-magenta {
    background-color: #FFB3FF;
}

/* Apply colors on row hover */
.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-yellow {
    background-color: #F6FB7A !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-green {
    background-color: #B4E380 !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-red {
    background-color: #FF6969 !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-orange {
    background-color: #FFD580 !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-blue {
    background-color: #ADD8E6 !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-cyan {
    background-color: #E0FFFF !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-magenta {
    background-color: #FFB3FF !important;
}

/* Apply colors when the row is selected */
.e-grid .e-gridcontent .e-row .e-rowcell.color-yellow.e-selectionbackground {
    background-color: #F6FB7A !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-green.e-selectionbackground {
    background-color: #B4E380 !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-red.e-selectionbackground {
    background-color: #FF6969 !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-orange.e-selectionbackground {
    background-color: #FFD580 !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-blue.e-selectionbackground {
    background-color: #ADD8E6 !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-cyan.e-selectionbackground {
    background-color: #E0FFFF !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-magenta.e-selectionbackground {
    background-color: #FFB3FF !important;
}

</style>

<div id="imageCarouselModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50" style="display: none;">
    <div class="bg-white p-6 rounded-lg w-3/4 h-3/4 mx-auto relative">
        <span class="close cursor-pointer float-right hover:scale-105 ease-in transition-all duration-300" onclick="closeModal()"><i class="fa-regular fa-circle-xmark text-indigo-600 text-2xl"></i></span>
        <div class="control-container flex justify-center items-center h-full">
            <SfCarousel AnimationEffect="CarouselAnimationEffect.Fade">
                @foreach (var image in carouselImages)
                {
                                        <CarouselItem>
                                            <figure class="img-container mx-auto w-3/4 h-full p-6">
                                                <img src="@image" alt="Image" class="w-full h-full object-contain" />
                                            </figure>
                                        </CarouselItem>
                }
            </SfCarousel>
        </div>
    </div>
</div>

<script>
    function openModal() {
        document.getElementById('imageCarouselModal').style.display = 'flex';
    }

    function closeModal() {
        document.getElementById('imageCarouselModal').style.display = 'none';
    }
</script>